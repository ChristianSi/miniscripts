#!/usr/bin/perl -CA

use 5.010;                # use new features such as "say"
use open qw(:std :utf8);  # use UTF-8 for all I/O (by default)
use strict;               # forbid unsafe constructs
use utf8;                 # allow UTF-8 in source code
use warnings;             # warn if doing silly things

use File::Basename 'basename';
use Getopt::Long qw(:config bundling);
use List::Util 'sum';
use Scalar::Util 'looks_like_number';

local $" = ', ';          # Redefine array element separator in quoted strings

# prepvalues @values: Prepares the list of values. If a value ends in a comma,
# it is stripped. If a single positive number n is specified instead of
# multiple values, the numbers ranging from 1 to n are used as values.
# Returns the modified list of values.
sub prepvalues {
    my @values = @_;
    s/,$// for @values;
    @values = (1 .. $values[0])
        if @values == 1 && looks_like_number $values[0] && $values[0] > 1;
    return @values;
}

# fibonacci $n: Returns the first $n Fibonacci numbers, starting with 1, 2.
sub fibonacci {
    my $n = shift;
    my ($x, $y) = (1, 2);
    return ($x) if $n <= 1;
    my @result = ($x, $y);

    for my $k (3 .. $n) {
        ($x, $y) = ($y, $x + $y);
        push @result, $y;
    }

    return @result;
}

# biasedshuffle $verbose, @values: Randomly shuffles @values, preferring those
# listed first. If $verbose is true, information about the internal
# proceedings of the algorithm is printed to stderr.
sub biasedshuffle {
    my $verbose = shift;
    my @values  = @_;
    my @result;
    my $sel;
    my @fibo = fibonacci(scalar @values);

    # reverse Fibonacci sequence so that the highest numbers come first
    @fibo = reverse @fibo;

    say STDERR "Reversed Fibonacci sequence: @fibo; values: @values"
        if $verbose;

    VALUE:
    while (@values > 1) {
        my $sum      = sum @fibo;
        my $rand     = int(rand $sum) + 1; # random integer in range [1..$sum]
        my $fibcount = 0;

        for my $i (0 .. $#fibo) {
            $fibcount += $fibo[$i];

            if ($fibcount >= $rand) {      # got the value to use
                $sel = splice @values, $i, 1;
                splice @fibo, $i, 1;
                push @result, $sel;

                if ($verbose) {
                    printf STDERR
                        "Random number: %d/%d; selected value #%d: %s\n",
                        $rand, $sum, $i + 1, $sel;
                    say STDERR "Remaining sequence: @fibo; ",
                        "remaining values: @values";
                }

                next VALUE;
            }
        }
    }

    if (@values) {  # push last remaining value
        $sel = shift @values;
        push @result, $sel;
    }

    return @result;
}

# printhelp $progname: Prints a help text (expects program name as argument).
sub printhelp {
    my $progname = shift;
    print <<END;
Usage:
  $progname [-v] VALUES...
  $progname [-v] NUMBER...

Options:
  -v, --verbose  Print internal state to stderr
  -h, --help     Print this help text and exit

The list of VALUES will be printed in a randomly rearranged order,
preferring values listed first over values listed later.
Specifying a NUMBER is the same as specifying the numbers from 1 to NUMBER.
END
}

# Set-up and parse options
my $verbose = 0;
my $help    = 0;
GetOptions('v|verbose' => \$verbose, "help|h" => \$help)
    or die "error: option parsing failed\n";

if ($help) {  # print help text and exit
    printhelp(basename $0);
    exit;
}

die "error: not enough arguments\n" unless @ARGV;

# Prepare and shuffle arguments and print result as comma-separated list
my @args = prepvalues @ARGV;
my @result = biasedshuffle $verbose, @args;
say "@result";

=head1 NAME

biasedshuffle - randomly shuffle values, preferring those listed first

=head1 SYNOPSIS

    biasedshuffle [-v] VALUE1, VALUE1...
    biasedshuffle [-v] NUMBER...

Randomly shuffles a list of values, preferring values from the begin of the
list. Values are weighted according to the Fibonacci series, starting from 1,
2, i.e., 1, 2, 3, 5, 8 etc. Weights are converted into probabilities (i.e.
their sum is normalized to 1), with the first value getting the highest
probability and the last one the lowest. Then one of the values is randomly
selected, taking their probabilities into account.

The probabilities of the remaining values are re-normalized (so they sum up to
1), and another value is randomly selected. This process is repeated until the
list is exhausted.

The resulting biased reordering of the values is printed as a comma-separated
list. If a value ends in a comma, it is stripped before printing.

If a single positive NUMBER is specified instead of a list of values, the
numbers ranging from 1 to the given NUMBER as used as values to shuffle.

If the C<-v> option is given, information about the internal proceedings of
the algorithm is printed to stderr.

=head1 SAMPLES

    biasedshuffle Monday Tuesday Wednesday Thursday Friday Saturday Sunday

One of the seven specified values will be selected according to their
probabilities, which are: 21/53 for Monday, 13/53 for Tuesday, 8/53 for
Wednesday, 5/53 for Thursday, 3/53 for Friday, 2/53 for Saturday, 1/53 for
Sunday.

Assuming that Wednesday was selected, on of the six remaining values will be
selected according to their probabilities, which are now re-normalized to:
21/45 for Monday, 13/45 for Tuesday, 5/45 for Thursday, 3/45 for Friday, 2/45
for Saturday, 1/45 for Sunday.

This process is repeated, until a single value remains, which is selected as
last element. The output might look like this:

    Wednesday, Monday, Tuesday, Friday, Saturday, Thursday, Sunday

Called with a number:

    biasedshuffle 3

This is the same as calling

    biasedshuffle 1 2 3

The output might be:

    1, 3, 2

=head1 PREREQUISITES

Just Perl itself, version 5.10 or later.

=head1 AUTHOR

Christian Siefkes <christian@siefkes.net>

=head1 COPYRIGHT

Copyright (c) 2012 Christian Siefkes

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
